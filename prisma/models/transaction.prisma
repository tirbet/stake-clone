model Transaction {
  id                  String            @id @default(uuid())
  walletId            Int
  userId              String
  transactionableId   String
  amount              Decimal           @db.Decimal(15, 2)
  transactionableType TransactionType
  description         String?
  balanceBefore       Decimal           @db.Decimal(15, 2)
  balanceAfter        Decimal           @db.Decimal(15, 2)
  status              TransactionStatus @default(COMPLETED)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet              Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([transactionableType, createdAt])
  @@index([walletId, createdAt])
  @@map("transaction")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  VAULT
  ADJUSTMENT
  FEE
  BET
  BET_WIN
  BET_LOSS
  BET_REFUND
  BET_CASHOUT
  BONUS
  WELCOME_BONUS
  RELOAD_BONUS
  FREE_SPINS
  CASHBACK
  LOYALTY_REWARD
  COMP_POINTS
  RAKEBACK
  TOURNAMENT_REWARD
  JACKPOT_WIN
  AFFILIATE
  REFERRAL_BONUS
  PARTNER_PAYOUT
  REVERSAL
  CHARGEBACK
  SYSTEM_ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
